__author__ = 'andresilva'
from math import sqrt
import random

def _dataset(list_of_critics=['Andre', 'Filipe', 'Ferreiro', 'Silva'],
             number_of_movies=10):
    critics = {}
    for c in list_of_critics:
        critics[c] = {}
        for i in range(number_of_movies):
            movie_name = 'Movie {}'.format(i + 1)
            critics[c][movie_name] = round(random.uniform(0.0, 10.0), 1)

    return critics

# A dictionary of movie critics and theirs ratings of a small set of movies
# generated by the script above.
critics = {
    'me':{
        'Movie 10': 1.8, 'Movie 2': 3.6, 'Movie 3': 9.5, 'Movie 7': 2.5,
        'Movie 9': 5.5
    },
    'Andre': {
        'Movie 1': 2.8, 'Movie 10': 1.8, 'Movie 2': 3.6, 'Movie 3': 9.5,
        'Movie 4': 5.1, 'Movie 5': 6.4, 'Movie 6': 3.4, 'Movie 7': 2.5,
        'Movie 8': 8.6, 'Movie 9': 5.5
    },
    'Ferreiro': {
        'Movie 1': 0.8, 'Movie 10': 4.3, 'Movie 2': 0.1, 'Movie 3': 9.7,
        'Movie 4': 6.4, 'Movie 5': 0.9, 'Movie 6': 1.3, 'Movie 7': 7.7,
        'Movie 8': 5.8, 'Movie 9': 3.2
    },
    'Filipe': {
        'Movie 1': 0.3, 'Movie 10': 7.5, 'Movie 2': 9.2, 'Movie 3': 1.4,
        'Movie 4': 10.0, 'Movie 5': 9.5, 'Movie 6': 5.6, 'Movie 7': 4.5,
        'Movie 8': 4.9, 'Movie 9': 2.3
    },
    'Silva': {
        'Movie 1': 7.5, 'Movie 10': 2.1, 'Movie 2': 2.4, 'Movie 3': 2.0,
        'Movie 4': 2.1, 'Movie 5': 0.7, 'Movie 6': 7.6, 'Movie 7': 7.3,
        'Movie 8': 5.5, 'Movie 9': 6.2
    }
}


# invert json
def transform_prefs(prefs):
    result = {}
    for person in prefs:
        for item in prefs[person]:
            result.setdefault(item, {})

            # flip item and person
            result[item][person] = prefs[person][item]
    return result



# calculate and returns the distance similarity for person1, person2
def sim_euclidean(prefs, p1, p2):
    # get list of shared_items
    si = {}
    for item in prefs[p1]:
        if item in prefs[p2]:
            si[item] = 1

    # if they have no ratings in common, return 0
    if len(si) == 0:
        return 0

    # add up all the squares of all the diferences
    sum_of_squares = sum([pow(prefs[p1][item] - prefs[p2][item], 2)
                          for item in prefs[p1] if item in prefs[p2]])

    # return 1/(sqrt(1+sum_of_squares)) whats on the book.. i think its missing the sqrt
    return 1/(1+sum_of_squares)

# calculates and returns pearson correlation coefficient for p1 and p2
def sim_pearson(prefs, p1, p2):
    # get list of mutual rated items
    si = {}
    for item in prefs[p1]:
        if item in prefs[p2]:
            si[item] = 1
    # find the number of elements
    n = len(si)

    # if they are no ratings in common, return 0
    if n==0:
        return 0

    # add up all the preferneces
    sum_p1 = sum([prefs[p1][item] for item in si])
    sum_p2 = sum([prefs[p2][item] for item in si])

    # sum up all the squares
    sum_p1_pow = sum([pow(prefs[p1][item], 2) for item in si])
    sum_p2_pow = sum([pow(prefs[p2][item], 2) for item in si])

    # sum up the products
    prod_sum = sum([prefs[p1][item] * prefs[p2][item] for item in si])

    # calculate persaon score
    num = prod_sum - (sum_p1 * sum_p2/n)
    den = sqrt((sum_p1_pow - pow(sum_p1, 2)/n) * (sum_p2_pow - pow(sum_p2, 2)/n))
    if den==0:
        return 0
    return num/den


# return the best matches for a person from the prefs dictionary
# number of results and similarity function are optional params
def top_matches(prefs, person, n=5, similarity=sim_pearson):
    scores = [(similarity(prefs, person, other), other)
              for other in prefs if other != person]
    # sort the list so the highest score appear on top
    scores.sort()
    scores.reverse()
    return scores[0:n]


# get recommendations for a person by using a weighted average
# of every other user's rankings
def get_recommendations(prefs, person, similarity=sim_pearson):
    totals = {}
    sim_sums = {}
    for other in prefs:
        # not me
        if other == person:
            continue
        sim = similarity(prefs, person, other)
        # ignore below or equal to zero
        if sim <= 0:
            continue
        for item in prefs[other]:
            # only score movies i haven't seen yet
            if item not in prefs[person] or prefs[person][item] == 0:
                # similarity * score
                totals.setdefault(item, 0)
                totals[item] += prefs[other][item] * sim
                # sum
                sim_sums.setdefault(item, 0)
                sim_sums[item] += sim
    # create normalize list
    rankings = [(total/sim_sums[item], item) for item, total in totals.items()]

    # return sorted list
    rankings.sort()
    rankings.reverse()
    return rankings


# create dataset of items instead of persons
def calculate_similar_items(prefs, n=10):
    # creat a dicitonary of items showing which other items they
    # are most similar to
    result = {}

    # invert the preference matrix to be item centric
    item_prefs = transform_prefs(prefs)
    c = 0
    for item in item_prefs:
        # status updates for large datasets
        c += 1
        if c % 100 == 0:
            print "{}/{}".format(c, len(item_prefs))

        # find the most_similar items to this one
        scores = top_matches(item_prefs, item, n=n, similarity=sim_euclidean)
        result[item] = scores
    return result


def get_recommended_items(prefs, item_match, user):
    user_ratings = prefs[user]
    scores = {}
    total_sim = {}

    # loop over items rated by this user
    for (item, rating) in user_ratings.items():

        # loop over items similar to this one
        for (similarity, item2) in item_match[item]:

            # ignore if this user has already rated this item
            if item2 in user_ratings: continue

            # weighted sum of rating time similarity
            scores.setdefault(item2, 0)
            scores[item2] += similarity * rating
            # sum of all the similarities
            total_sim.setdefault(item2, 0)
            total_sim[item2] += similarity

    # divide each total score by total wieghting to et an average
    rankings = [(score/total_sim[item], item) for item, score in scores.items()]

    # return ordered rankings from highest to lowest
    rankings.sort()
    rankings.reverse()
    return rankings
